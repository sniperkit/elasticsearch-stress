// Code generated by protoc-gen-go.
// source: commands.proto
// DO NOT EDIT!

/*
Package commands is a generated protocol buffer package.

It is generated from these files:
	commands.proto

It has these top-level messages:
	Query
	RawDocument
	Document
	IndexResponse
	SearchResponse
*/
package commands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Query struct {
	Desired int64 `protobuf:"varint,1,opt,name=desired" json:"desired,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Query) GetDesired() int64 {
	if m != nil {
		return m.Desired
	}
	return 0
}

type RawDocument struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RawDocument) Reset()                    { *m = RawDocument{} }
func (m *RawDocument) String() string            { return proto.CompactTextString(m) }
func (*RawDocument) ProtoMessage()               {}
func (*RawDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RawDocument) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Document struct {
	ID   string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Body []byte `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"Body,omitempty"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (m *Document) String() string            { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Document) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Document) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type IndexResponse struct {
	IDs      []string `protobuf:"bytes,1,rep,name=IDs,json=iDs" json:"IDs,omitempty"`
	Duration int64    `protobuf:"varint,2,opt,name=Duration,json=duration" json:"Duration,omitempty"`
	Size     int64    `protobuf:"varint,3,opt,name=Size,json=size" json:"Size,omitempty"`
}

func (m *IndexResponse) Reset()                    { *m = IndexResponse{} }
func (m *IndexResponse) String() string            { return proto.CompactTextString(m) }
func (*IndexResponse) ProtoMessage()               {}
func (*IndexResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IndexResponse) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

func (m *IndexResponse) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *IndexResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type SearchResponse struct {
	Documents []*Document `protobuf:"bytes,1,rep,name=documents" json:"documents,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchResponse) GetDocuments() []*Document {
	if m != nil {
		return m.Documents
	}
	return nil
}

func init() {
	proto.RegisterType((*Query)(nil), "commands.Query")
	proto.RegisterType((*RawDocument)(nil), "commands.RawDocument")
	proto.RegisterType((*Document)(nil), "commands.Document")
	proto.RegisterType((*IndexResponse)(nil), "commands.IndexResponse")
	proto.RegisterType((*SearchResponse)(nil), "commands.SearchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommandService service

type CommandServiceClient interface {
	Index(ctx context.Context, in *Query, opts ...grpc.CallOption) (*IndexResponse, error)
	Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResponse, error)
}

type commandServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommandServiceClient(cc *grpc.ClientConn) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) Index(ctx context.Context, in *Query, opts ...grpc.CallOption) (*IndexResponse, error) {
	out := new(IndexResponse)
	err := grpc.Invoke(ctx, "/commands.CommandService/Index", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/commands.CommandService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommandService service

type CommandServiceServer interface {
	Index(context.Context, *Query) (*IndexResponse, error)
	Search(context.Context, *Query) (*SearchResponse, error)
}

func RegisterCommandServiceServer(s *grpc.Server, srv CommandServiceServer) {
	s.RegisterService(&_CommandService_serviceDesc, srv)
}

func _CommandService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commands.CommandService/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Index(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commands.CommandService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Search(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commands.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _CommandService_Index_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _CommandService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commands.proto",
}

func init() { proto.RegisterFile("commands.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcd, 0x6e, 0xea, 0x30,
	0x14, 0x84, 0x09, 0x06, 0x6e, 0x38, 0xdc, 0xa6, 0x95, 0x37, 0xb5, 0x58, 0x51, 0x6f, 0xca, 0x2a,
	0xaa, 0x40, 0x7d, 0x01, 0xea, 0x4d, 0x96, 0x38, 0x4f, 0x10, 0xe2, 0xa3, 0xd6, 0x8b, 0xc4, 0xc8,
	0x4e, 0xda, 0x06, 0xf5, 0xe1, 0x2b, 0x9c, 0x3f, 0xa1, 0x2e, 0x67, 0x32, 0x33, 0xfa, 0x72, 0x0c,
	0x51, 0x6e, 0x8a, 0x22, 0x2b, 0x95, 0x8b, 0xcf, 0xd6, 0x54, 0x86, 0x86, 0xbd, 0xe6, 0x4f, 0x30,
	0x3f, 0xd6, 0x68, 0x1b, 0xca, 0xe0, 0x9f, 0x42, 0xa7, 0x2d, 0x2a, 0x16, 0x6c, 0x82, 0x2d, 0x91,
	0xbd, 0xe4, 0xcf, 0xb0, 0x92, 0xd9, 0x97, 0x30, 0x79, 0x5d, 0x60, 0x59, 0x5d, 0x83, 0x05, 0x3a,
	0x97, 0xbd, 0xa3, 0x0f, 0x2e, 0x65, 0x2f, 0x79, 0x0c, 0xe1, 0x90, 0x8a, 0x60, 0x9a, 0x88, 0x2e,
	0x30, 0xd5, 0x82, 0x52, 0x98, 0x1d, 0x8c, 0x6a, 0xd8, 0x74, 0x13, 0x6c, 0xff, 0xcb, 0xd9, 0xc9,
	0xa8, 0x86, 0x1f, 0xe1, 0x2e, 0x29, 0x15, 0x7e, 0x4b, 0x74, 0x67, 0x53, 0x3a, 0xa4, 0x0f, 0x40,
	0x12, 0xe1, 0x58, 0xb0, 0x21, 0xdb, 0xa5, 0x24, 0x5a, 0x38, 0xba, 0x86, 0x50, 0xd4, 0x36, 0xab,
	0xb4, 0x29, 0x7d, 0x95, 0xc8, 0x50, 0x75, 0xfa, 0x3a, 0x99, 0xea, 0x0b, 0x32, 0xe2, 0xfd, 0x99,
	0xd3, 0x17, 0xe4, 0x07, 0x88, 0x52, 0xcc, 0x6c, 0xfe, 0x31, 0x6c, 0xbe, 0xc0, 0x52, 0x75, 0x50,
	0xed, 0xf2, 0x6a, 0x47, 0xe3, 0xe1, 0x1c, 0x3d, 0xaf, 0x1c, 0x43, 0xbb, 0x1f, 0x88, 0xde, 0xda,
	0xef, 0x29, 0xda, 0x4f, 0x9d, 0x23, 0xdd, 0xc3, 0xdc, 0x83, 0xd2, 0xfb, 0xb1, 0xe9, 0xaf, 0xb6,
	0x7e, 0x1c, 0x8d, 0x9b, 0x5f, 0xe1, 0x13, 0xfa, 0x0a, 0x8b, 0x16, 0xe5, 0x6f, 0x8b, 0x8d, 0xc6,
	0x2d, 0x2d, 0x9f, 0x9c, 0x16, 0xfe, 0x85, 0xf6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x76, 0x73,
	0x1a, 0x5c, 0xb3, 0x01, 0x00, 0x00,
}
